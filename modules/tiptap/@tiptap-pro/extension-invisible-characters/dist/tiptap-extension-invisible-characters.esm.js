import{Extension as e}from"@tiptap/core";import{PluginKey as t,Plugin as i,AllSelection as n}from"@tiptap/pm/state";import{DecorationSet as s,Decoration as r}from"@tiptap/pm/view";const a=new t("invisibleCharacters"),o=(e,t)=>{const r=a,o=s.create(e.doc,[]),c=(e,i,n,s)=>t.builders.sort(((e,t)=>e.priority>t.priority?1:-1)).reduce(((t,s)=>s.createDecoration(e,i,n.doc,t)),s);return new i({key:r,state:{init:()=>{const{$from:i,$to:r}=new n(e.doc);return t.injectCSS&&document&&((e,t)=>{const i=document.querySelector("style[data-tiptap-extension-invisible-characters-style]");if(null!==i)return i;const n=document.createElement("style");t&&n.setAttribute("nonce",t),n.setAttribute("data-tiptap-extension-invisible-characters-style",""),n.innerHTML=e,document.getElementsByTagName("head")[0].appendChild(n)})(".Tiptap-invisible-character {\n  height: 0;\n  padding: 0;\n  pointer-events: none;\n  user-select: none;\n  width: 0;\n}\n\n.Tiptap-invisible-character::before {\n  caret-color: inherit;\n  color: #aaa;\n  display: inline-block;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1em;\n  width: 0;\n}\n\n.Tiptap-invisible-character--space::before {\n  content: '·'\n}\n\n.Tiptap-invisible-character--break::before {\n  content: '¬'\n}\n\n.Tiptap-invisible-character--paragraph::before {\n  content: '¶'\n}\n\n.Tiptap-invisible-character + img.ProseMirror-separator {\n  height: 0 !important;\n  pointer-events: none;\n  user-select: none;\n  width: 0 !important;\n}\n\n.is-empty[data-placeholder].has-focus > .Tiptap-invisible-character {\n  display: none;\n}\n",t.injectNonce),{visible:t.visible,decorations:c(i.pos,r.pos,e,s.empty)}},apply:(e,t,i,n)=>{const s=((e,t)=>void 0===t?e:{...e,visible:t})(t,e.getMeta("setInvisibleCharactersVisible")),r=(({mapping:e})=>{const t=[];return e.maps.forEach(((i,n)=>{i.forEach(((i,s,r,a)=>{t.push([e.slice(n+1).map(r),e.slice(n+1).map(a)])}))})),t})(e).reduce(((e,[t,i])=>c(t,i,n,e)),s.decorations.map(e.mapping,e.doc));return{...s,decorations:r}}},props:{decorations(e){const{visible:t,decorations:i}=this.getState(e);return t?i:o}}})},c=(e,t,i)=>r.widget(e,(()=>{const e=document.createElement("span");return e.classList.add("Tiptap-invisible-character"),e.classList.add(`Tiptap-invisible-character--${t}`),i&&(e.textContent=i),e}),{key:t,marks:[],side:1e3}),p=(e,t)=>t+e.nodeSize-1;class d{constructor(e){this.predicate=e.predicate,this.type=e.type,this.position=e.position||p,this.content=e.content,this.priority=e.priority||100}createDecoration(e,t,i,n){let s=n;return i.nodesBetween(e,t,((e,t)=>{if(this.test(e)){const n=this.position(e,t),r=s.find(n,n,(e=>e.key===this.type));s=s.remove(r).add(i,[c(n,this.type,this.content)])}})),s}test(e){return this.predicate(e)}}class l extends d{constructor(){super({type:"break",predicate:e=>e.type===e.type.schema.nodes.hardBreak})}}class h extends d{constructor(){super({type:"paragraph",predicate:e=>e.type===e.type.schema.nodes.paragraph})}}class u{constructor(e){this.predicate=e.predicate,this.type=e.type,this.content=e.content,this.priority=e.priority||100}createDecoration(e,t,i,n){const s=((e,t,i)=>{const n=[];return i.nodesBetween(e,t,((i,s)=>{var r;if(i.isText){const a=Math.max(e,s)-s;n.push({pos:s+a,text:(null===(r=i.text)||void 0===r?void 0:r.slice(a,t-s))||""})}})),n})(e,t,i);return s.reduce(((e,t)=>t.text.split("").reduce(((e,n,s)=>this.test(n)?e.add(i,[c(t.pos+s,this.type,this.content)]):e),e)),n)}test(e){return this.predicate(e)}}class b extends u{constructor(){super({type:"space",predicate:e=>" "===e})}}const v=e.create({name:"invisibleCharacters",addOptions:()=>({visible:!0,builders:[new b,new h,new l],injectCSS:!0,injectNonce:void 0}),addProseMirrorPlugins(){return[o(this.editor.state,this.options)]},addStorage(){return{visibility:()=>this.options.visible}},onBeforeCreate(){this.storage.visibility=()=>{var e;return null===(e=a.getState(this.editor.state))||void 0===e?void 0:e.visible}},addCommands:()=>({showInvisibleCharacters:(e=!0)=>({dispatch:t,tr:i})=>(t&&i.setMeta("setInvisibleCharactersVisible",e),!0),hideInvisibleCharacters:()=>({dispatch:e,tr:t})=>(e&&t.setMeta("setInvisibleCharactersVisible",!1),!0),toggleInvisibleCharacters:()=>({dispatch:e,tr:t,state:i})=>{var n;const s=!(null===(n=a.getState(i))||void 0===n?void 0:n.visible);return e&&t.setMeta("setInvisibleCharactersVisible",s),!0}})});export{l as HardBreakNode,u as InvisibleCharacter,v as InvisibleCharacters,d as InvisibleNode,h as ParagraphNode,b as SpaceCharacter,v as default};
