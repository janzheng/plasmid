"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _airtable = _interopRequireDefault(require("airtable"));

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Cytosis = function () {
  function Cytosis(opts) {
    (0, _classCallCheck2.default)(this, Cytosis);

    var _this = this;

    this.apiKey = opts.apiEditorKey || opts.apiKey;
    this.apiEditorKey = opts.apiEditorKey;
    this.baseId = opts.baseId;
    this.routeDetails = opts.routeDetails;
    this.configObject = opts.configObject || {};
    this.bases = opts.bases || [];
    this.tableOptions = opts.tableOptions || {
      view: "Grid view",
      keyword: undefined
    };
    this.configTableName = opts.configTableName || '_cytosis';
    this.configName = opts.configName || undefined;
    this.getConfigOnly = opts.getConfigOnly || false;
    this.currentPage = opts.currentPage || 0;
    this.pageDelay = opts.pageDelay || 150;
    this.tablesLoaded = [];
    this.endpointUrl = opts.endpointUrl;
    this.results = {};
    this._lastUpdated;
    return new Promise(function (resolve, reject) {
      _this.init().then(function (loaded) {
        if (_this.getConfigOnly) {
          resolve(_this);
          return;
        }

        if (loaded) {
          console.log('[Cytosis] _cytosis initiated:', _this.bases);
          Cytosis.getTables({
            cytosis: _this,
            bases: _this.bases,
            routeDetails: _this.routeDetails
          }).then(function (_results) {
            console.log('Cytosis Base results:', _results);
            _this.results = _objectSpread(_objectSpread({}, _this.results), _results);
            _this._lastUpdated = new Date();
            resolve(_this);
          }, function (err) {
            reject(new Error("[Cytosis/init] Cytosis initialization error: Couldn't retrieve all tables from your Base. Please double check our 'tables' and 'views' column to make sure the table names match and corresponding views exist", err));
          });
        } else {
          reject(_this);
        }
      }, function (err) {
        reject(new Error("[Cytosis/init] Cytosis initialization error: Couldn't setup Config ('_cytosis'). Make sure your Base has a config table, e.g. a table named '_cytosis' with the views configured!", err));
      });
    });
  }

  (0, _createClass2.default)(Cytosis, [{
    key: "init",
    value: function init() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (_this.config) {
          loadFromConfig(_this.config);
          resolve(true);
        }

        if (_this.bases && _this.bases.length > 0) resolve(true);

        var loadFromConfig = function loadFromConfig(_config) {
          _this['configObject'] = _config;

          var _iterator = _createForOfIteratorHelper(_config[_this.configTableName]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var config = _step.value;

              if (config.fields['Name'] == _this.configName && config.fields['Tables']) {
                var options = {
                  fields: config.fields['fields'],
                  filter: config.fields['filterByFormula'],
                  maxRecords: config.fields['maxRecords'],
                  pageSize: config.fields['pageSize'],
                  sort: config.fields['sort'] ? JSON.parse(config.fields['sort'])['sort'] : undefined,
                  view: config.fields['view'],
                  matchKeywordWithField: config.fields['matchKeywordWithField'],
                  matchStyle: config.fields['matchStyle']
                };
                _this.bases = [{
                  query: _this.configName,
                  tables: config.fields['Tables'],
                  options: options
                }];
              } else if (config.fields['Name'] == _this.configName && config.fields['LinkedconfigNames']) {
                  (function () {
                    var linkedQueries = config.fields['LinkedconfigNames'];
                    var bases = [];
                    linkedQueries.map(function (linkedquery) {
                      _config._cytosis.map(function (query) {
                        if (linkedquery == query.fields['Name']) {
                          var _options = {
                            fields: query.fields['fields'],
                            filter: query.fields['filterByFormula'],
                            maxRecords: query.fields['maxRecords'],
                            pageSize: query.fields['pageSize'],
                            sort: query.fields['sort'] ? JSON.parse(query.fields['sort'])['sort'] : undefined,
                            view: query.fields['view']
                          };
                          bases.push({
                            query: linkedquery,
                            tables: query.fields['Tables'],
                            options: _options
                          });
                        }
                      });
                    });
                    _this.bases = bases;
                  })();
                }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        };

        if (!_this.config) {
          console.log('[Cytosis/init] Loading config from table:', _this.configTableName);
          Cytosis.getTables({
            cytosis: _this,
            bases: [{
              tables: [_this.configTableName],
              options: {}
            }],
            routeDetails: "init-".concat(_this.configTableName, "-").concat(_this.routeDetails)
          }).then(function (_config) {
            if (!_config || _config[_this.configTableName].length == 0) {
              reject(new Error("[Cytosis] \u2014 couldn\u2019t find a reference table named ".concat(_this.configTableName, " in the base with reference field: :").concat(_this.configName, " or 'tables' filled out with the names of tables to load")));
            }

            if (_config) {
              loadFromConfig(_config);
            }

            resolve(true);
          }, function (err) {
            reject(new Error("[Cytosis] Couldn't retrieve Config object from Airtable", err));
          });
        }
      });
    }
  }, {
    key: "find",
    value: function find(findStr) {
      var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['Name'];
      return Cytosis.find(findStr, this.results, fields);
    }
  }, {
    key: "save",
    value: function save(object, tableName) {
      var recordId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      return Cytosis.save(object, tableName, this, recordId);
    }
  }, {
    key: "saveArray",
    value: function saveArray(objectArray, tableName) {
      var create = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var typecast = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      return Cytosis.saveArray(objectArray, tableName, this, create, typecast);
    }
  }, {
    key: "delete",
    value: function _delete(tableName, recordId) {
      return Cytosis.delete(tableName, this, recordId);
    }
  }, {
    key: "saveLinkedTable",
    value: function saveLinkedTable(stringList, targetTableName, sourceTable) {
      var colName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Name';
      return Cytosis.saveLinkedTable(stringList, targetTableName, sourceTable, this, colName);
    }
  }], [{
    key: "getBase",
    value: function getBase(apiKey, baseId) {
      var endpointUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'https://api.airtable.com';

      _airtable.default.configure({
        endpointUrl: endpointUrl,
        apiKey: apiKey
      });

      return _airtable.default.base(baseId);
    }
  }, {
    key: "preCheck",
    value: function preCheck(_ref) {
      var apiKey = _ref.apiKey,
          baseId = _ref.baseId;
      if (apiKey && baseId) return true;
      throw new Error('[Cytosis/precheck] Please provide an API key and Base ID');
    }
  }, {
    key: "getTables",
    value: function getTables(_ref2) {
      var cytosis = _ref2.cytosis,
          bases = _ref2.bases,
          routeDetails = _ref2.routeDetails;
      bases = bases || cytosis.bases;
      var pTables = [];
      if (!Cytosis.preCheck(cytosis)) return {};

      var airtableFetch = function airtableFetch(_ref3) {
        var base = _ref3.base,
            tableName = _ref3.tableName,
            filterObj = _ref3.filterObj,
            list = _ref3.list;
        return new Promise(function (resolve, reject) {
          var timedFetcher;
          base(tableName).select(filterObj).eachPage(function page(records, fetchNextPage) {
            cytosis.currentPage += 1;
            records.forEach(function (record) {
              list = [].concat((0, _toConsumableArray2.default)(list), [Cytosis.cleanRecord(record)]);
            });
            timedFetcher = setTimeout(fetchNextPage, cytosis.pageDelay);
          }, function done(err) {
            clearTimeout(timedFetcher);

            if (err) {
              console.error('[Cytosis/getTablePromise/airtableFetch] Airtable Fetch Error @routeDetails:', routeDetails);
              console.error('[Cytosis/getTablePromise/airtableFetch] Airtable Fetch Error [2]', 'Errored on table:', tableName, 'bases:', bases);
              console.error('[Cytosis/getTablePromise/airtableFetch] Airtable Fetch Error >> error message:', err);
              reject(new Error("[Cytosis/getTablePromise/airtableFetch] No response from Airtable"));
            }

            cytosis.tablesLoaded = [].concat((0, _toConsumableArray2.default)(cytosis.tablesLoaded), [tableName]);
            resolve((0, _defineProperty2.default)({}, tableName, list));
          });
        });
      };

      var getTablePromise = function getTablePromise(_ref4) {
        var tableNames = _ref4.tableNames,
            options = _ref4.options;

        try {
          var filterObj = Cytosis.getFilterOptions(options);

          var _iterator2 = _createForOfIteratorHelper(tableNames),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _tableName = _step2.value;
              var list = [];

              if (cytosis.tablesLoaded.includes(_tableName)) {
                continue;
              }

              pTables.push(airtableFetch({
                base: Cytosis.getBase(cytosis.apiKey, cytosis.baseId),
                tableName: _tableName,
                filterObj: filterObj,
                list: list
              }));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } catch (e) {
          console.error('[Cytosis/getTables/getTablePromise] Airtable caught general error', e);
        }
      };

      bases.map(function (base) {
        getTablePromise({
          tableNames: base.tables,
          options: base.options || {},
          apiKey: base.apiKey || cytosis.apiKey,
          baseId: base.baseId || cytosis.baseId
        });
      });

      try {
        return Promise.all(pTables).then(function (tables) {
          var finalObj = {};

          var _iterator3 = _createForOfIteratorHelper(tables),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var table = _step3.value;
              finalObj = _objectSpread(_objectSpread({}, finalObj), table);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          return finalObj;
        }, function (err) {
          console.error("[Cytosis/getTables] A table errored out or timed out: ", err);
          return Promise.reject(new Error("[Cytosis/getTables] Fetch Error"));
        });
      } catch (err) {
        console.error("[Cytosis/getTables/pTablesPromiseHandling] An Airtable table errored out", err);
      }
    }
  }, {
    key: "getPageTable",
    value: function getPageTable(_ref5, callback) {
      var cytosis = _ref5.cytosis,
          routeDetails = _ref5.routeDetails,
          apiKey = _ref5.apiKey,
          baseId = _ref5.baseId,
          tableName = _ref5.tableName,
          options = _ref5.options;
      var base = Cytosis.getBase(apiKey || cytosis.apiKey, baseId || cytosis.baseId);
      if (!tableName) if (cytosis.bases[0].tables[0]) tableName = cytosis.bases[0].tables[0];else throw new Error('[Cytosis/getPageTable] Please give a table name for pagination');
      var filterObj = Cytosis.getFilterOptions(options || cytosis.bases[0].options);
      var results = [];
      var currentPage = 0;
      var isDone = false;
      var baseSelect = base(tableName).select(filterObj);
      var fetchResolve, lastBatch;
      baseSelect.eachPage(function page(records, fetchNextPage) {
        currentPage += 1;

        if (lastBatch && lastBatch[0].id === records[0].id) {
          isDone = true;
        }

        if (!isDone) {
          lastBatch = records;
          records.forEach(function (record) {
            results = [].concat((0, _toConsumableArray2.default)(results), [Cytosis.cleanRecord(record)]);
          });
        }

        if (fetchResolve) fetchResolve(results);
        callback({
          results: results,
          isDone: isDone,
          getNextPage: function () {
            var _getNextPage = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
              var _results2;

              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (isDone) {
                        _context.next = 4;
                        break;
                      }

                      _context.next = 3;
                      return new Promise(function (_resolve, _reject) {
                        fetchResolve = _resolve;
                        fetchNextPage();
                      });

                    case 3:
                      _results2 = _context.sent;

                    case 4:
                      return _context.abrupt("return", {
                        results: results,
                        isDone: isDone
                      });

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            function getNextPage() {
              return _getNextPage.apply(this, arguments);
            }

            return getNextPage;
          }()
        });
      }, function done(err) {
        if (err) {
          console.error('[Cytosis/getPageTable] Airtable Fetch Error @routeDetails:', routeDetails);
          console.error('[Cytosis/getPageTable] Airtable Fetch Error [2]', 'Errored on table:', tableName, 'tableNames:', tableNames);
          console.error('[Cytosis/getPageTable] Airtable Fetch Error >> error message:', err);
          reject(new Error("[Cytosis/getPageTable] No response from Airtable"));
        }

        isDone = true;
        console.log('done!', results);
        callback({
          results: results,
          isDone: isDone
        });
      });
    }
  }, {
    key: "getFilterOptions",
    value: function getFilterOptions(options) {
      var fields = options.fields,
          sort = options.sort,
          maxRecords = options.maxRecords,
          pageSize = options.pageSize;
      var view = options.view || '';
      var filter = options.filter || '';

      if (options && options.keyword && options.matchKeywordWithField) {
        filter = "IF({".concat(options.matchKeywordWithField, "} = \"").concat(options.keyword, "\",TRUE(),FALSE())");
        if (options.matchStyle == "partial") filter = "IF(SEARCH(\"".concat(options.keyword, "\",{").concat(options.matchKeywordWithField, "}) > 0,TRUE(),FALSE())");
      }

      var filterObj = {
        filterByFormula: filter,
        view: view
      };

      if (sort) {
        filterObj['sort'] = sort;
      }

      if (maxRecords) {
        filterObj['maxRecords'] = maxRecords;
      }

      if (pageSize) {
        filterObj['pageSize'] = pageSize;
      }

      if (fields && fields[tableName]) {
        filterObj['fields'] = fields[tableName];
      } else if (fields) {
        filterObj['fields'] = fields;
      }

      return filterObj;
    }
  }, {
    key: "get",
    value: function get(recordId, tables) {
      var result;

      if (tables) {
        Object.keys(tables).map(function (table) {
          var _iterator4 = _createForOfIteratorHelper(tables[table]),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var record = _step4.value;

              if (record.id == recordId) {
                result = record;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        });
        return result;
      }

      return undefined;
    }
  }, {
    key: "getRecord",
    value: function () {
      var _getRecord = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(_ref6) {
        var recordId, base, tableName, apiKey, baseId, endpointUrl, record;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                recordId = _ref6.recordId, base = _ref6.base, tableName = _ref6.tableName, apiKey = _ref6.apiKey, baseId = _ref6.baseId, endpointUrl = _ref6.endpointUrl;
                _context2.prev = 1;

                if (tableName) {
                  _context2.next = 4;
                  break;
                }

                throw new Error("[Cytosis/getRecord] Please provide a table name");

              case 4:
                if (apiKey) {
                  _context2.next = 6;
                  break;
                }

                throw new Error("[Cytosis/getRecord] Please provide an apiKey");

              case 6:
                if (baseId) {
                  _context2.next = 8;
                  break;
                }

                throw new Error("[Cytosis/getRecord] Please provide a base ID");

              case 8:
                if (!base) {
                  base = Cytosis.getBase(apiKey, baseId);
                }

                _context2.next = 11;
                return base(tableName).find(recordId);

              case 11:
                record = _context2.sent;
                return _context2.abrupt("return", record);

              case 15:
                _context2.prev = 15;
                _context2.t0 = _context2["catch"](1);
                return _context2.abrupt("return", Promise.reject());

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 15]]);
      }));

      function getRecord(_x) {
        return _getRecord.apply(this, arguments);
      }

      return getRecord;
    }()
  }, {
    key: "find",
    value: function find(findStr, tables) {
      var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['Name'];
      if (!findStr || !tables) return [];

      if (typeof fields == "string") {
        console.error('[Cytosis] find "fields" argument must be an array');
        return undefined;
      }

      function matchField(str, tables, fields) {
        var results = [];
        Object.keys(tables).map(function (table) {
          if (!tables[table]) throw new Error("[Cytosis/Find] \u2014 Couldn\u2019t find a match. Make sure you're looking in the right place. Reference table/string: (".concat(tables[table], " / ").concat(findStr, "). Required Format was probably wrong: { Content: [ row, row, row], Tags: [ row, row, row ] }. "));

          var _iterator5 = _createForOfIteratorHelper(tables[table]),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var record = _step5.value;

              var _iterator6 = _createForOfIteratorHelper(fields),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var field = _step6.value;

                  if (record && record.fields && record.fields[field] && str == record.fields[field]) {
                    results.push(record);
                  }
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        });
        return results;
      }

      var queries = findStr.split('.');
      if (queries.length == 1) return matchField(queries[0], tables, fields)[0];
      if (queries.length == 2) return matchField(queries[1], {
        q: tables[queries[0]]
      }, fields);
      var records = matchField(queries[1], {
        q: tables[queries[0]]
      }, fields);

      if (!Array.isArray(records[0].fields[queries[2]])) {
        return records[0].fields[queries[2]];
      }

      var fieldContent = records[0].fields[queries[2]];

      if (queries.length == 4) {
        var result = [];

        var _iterator7 = _createForOfIteratorHelper(fieldContent),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var id = _step7.value;
            var record = Cytosis.get(id, tables);
            result.push(record.fields[queries[3]]);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return result.join(', ');
      }

      return fieldContent;
    }
  }, {
    key: "findOne",
    value: function findOne(findStr, table) {
      var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['Name'];
      if (!table) return undefined;

      if (typeof fields == "string") {
        console.error('[Cytosis] find "fields" argument must be an array');
        return undefined;
      }

      var key = findStr.split('.').length > 0 ? findStr.split('.')[0] : '_key';
      var payload = {};
      payload[key] = table;
      var output = this.find(findStr, payload, fields);
      if (output && output.length && output.length > 0) return output[0];else if (output) return output;
      return undefined;
    }
  }, {
    key: "findField",
    value: function findField(findStr, table, contentField) {
      var fields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ['Name'];
      var element = Cytosis.findOne(findStr, table, fields);
      if (element && element.fields && element.fields[contentField]) return element.fields[contentField];
      return undefined;
    }
  }, {
    key: "save",
    value: function save(object, tableName, cytosis) {
      var recordId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      if (!Cytosis.preCheck(cytosis)) return;
      var base = cytosis.base;

      try {
        return new Promise(function (resolve, reject) {
          if (!recordId) {
            base(tableName).create(object, function (err, record) {
              if (err) {
                console.error('Airtable async save/create error', err);
                reject(err);
                return;
              }

              console.log('New record: ', record.getId(), record.fields['Name']);
              resolve(record);
            });
          } else {
            base(tableName).update(recordId, object, function (err, record) {
              if (err) {
                console.error('Airtable async save error', err);
                reject(err);
                return;
              }

              console.log('Updated record: ', record.getId(), record.fields['Name']);
              resolve(record);
            });
          }
        });
      } catch (e) {
        console.error('Save Object to Airtable error (do you have permission?)', e);
        return;
      }
    }
  }, {
    key: "saveArray",
    value: function saveArray(objectArray, tableName, cytosis) {
      var create = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var typecast = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      if (!Cytosis.preCheck(cytosis)) return;
      var base = cytosis.base;

      try {
        return new Promise(function (resolve, reject) {
          if (create) {
            base(tableName).create(objectArray, {
              typecast: typecast
            }, function (err, records) {
              if (err) {
                console.error('Airtable async saveArray/create error', err);
                reject(err);
                return;
              }

              console.log('New records: ', records);
              resolve(records);
            });
          } else {
            base(tableName).update(objectArray, {
              typecast: typecast
            }, function (err, records) {
              if (err) {
                console.error('Airtable async saveArray/update error', err);
                reject(err);
                return;
              }

              console.log('Updated records: ', records);
              resolve(records);
            });
          }
        });
      } catch (e) {
        console.error('SaveArray Object to Airtable error (do you have permission?)', e);
        return;
      }
    }
  }, {
    key: "delete",
    value: function _delete(tableName, cytosis, recordId) {
      if (!Cytosis.preCheck(cytosis)) return;
      var base = cytosis.base;

      try {
        return new Promise(function (resolve, reject) {
          if (recordId) {
            base(tableName).destroy(recordId, function (err, record) {
              if (err) {
                console.error('Airtable async delete error', err);
                reject(err);
                return;
              }

              console.log('Deleted record: ', record.getId(), record.fields['Name']);
              resolve(record);
            });
          }
        });
      } catch (e) {
        console.error('Delete Object from Airtable error (do you have permission?)', e);
        return;
      }
    }
  }, {
    key: "saveLinkedTable",
    value: function () {
      var _saveLinkedTable = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(stringList, targetTableName, sourceTable, cytosis) {
        var colName,
            recordIds,
            _args4 = arguments;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                colName = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : 'Name';
                _context4.next = 3;
                return stringList.reduce(function () {
                  var _ref7 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(resultPromise, listItem) {
                    var _result, _iterator8, _step8, record, recordName, recordId;

                    return _regenerator.default.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return resultPromise;

                          case 2:
                            _result = _context3.sent;
                            _iterator8 = _createForOfIteratorHelper(sourceTable);
                            _context3.prev = 4;

                            _iterator8.s();

                          case 6:
                            if ((_step8 = _iterator8.n()).done) {
                              _context3.next = 13;
                              break;
                            }

                            record = _step8.value;
                            recordName = record.fields[colName];

                            if (!(recordName && listItem.toLowerCase() == recordName.toLowerCase())) {
                              _context3.next = 11;
                              break;
                            }

                            return _context3.abrupt("return", _result.concat(record.getId()));

                          case 11:
                            _context3.next = 6;
                            break;

                          case 13:
                            _context3.next = 18;
                            break;

                          case 15:
                            _context3.prev = 15;
                            _context3.t0 = _context3["catch"](4);

                            _iterator8.e(_context3.t0);

                          case 18:
                            _context3.prev = 18;

                            _iterator8.f();

                            return _context3.finish(18);

                          case 21:
                            _context3.next = 23;
                            return Cytosis.save({
                              'Name': listItem
                            }, targetTableName, cytosis);

                          case 23:
                            recordId = _context3.sent;
                            return _context3.abrupt("return", _result.concat(recordId.id));

                          case 25:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, null, [[4, 15, 18, 21]]);
                  }));

                  return function (_x6, _x7) {
                    return _ref7.apply(this, arguments);
                  };
                }(), Promise.resolve([]));

              case 3:
                recordIds = _context4.sent;
                return _context4.abrupt("return", recordIds);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function saveLinkedTable(_x2, _x3, _x4, _x5) {
        return _saveLinkedTable.apply(this, arguments);
      }

      return saveLinkedTable;
    }()
  }, {
    key: "cleanTable",
    value: function cleanTable(table) {
      return table.map(function (entry) {
        return {
          fields: entry.fields,
          id: entry.id
        };
      });
    }
  }, {
    key: "cleanRecord",
    value: function cleanRecord(record) {
      return {
        fields: record.fields,
        id: record.id
      };
    }
  }, {
    key: "strip",
    value: function strip(cytosis) {
      var _cytosis = {};
      _cytosis['config'] = {
        _cytosis: Cytosis.cleanTable(cytosis.config._cytosis)
      };
      _cytosis['airBase'] = cytosis['airBase'];
      _cytosis['apiKey'] = cytosis['apiKey'];
      _cytosis['endpointUrl'] = cytosis['endpointUrl'];
      _cytosis['routeDetails'] = cytosis['routeDetails'];
      _cytosis['tables'] = {};
      Object.keys(cytosis.tables).map(function (tableName) {
        _cytosis['tables'][tableName] = Cytosis.cleanTable(cytosis.tables[tableName]);
      });
      return _cytosis;
    }
  }, {
    key: "getLinkedRecords",
    value: function getLinkedRecords(recordIdArray, sourceArray) {
      var getObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (!recordIdArray || !sourceArray) return [];
      var records = [];

      var _iterator9 = _createForOfIteratorHelper(recordIdArray),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var recordId = _step9.value;

          var _iterator10 = _createForOfIteratorHelper(sourceArray),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var linkedRecord = _step10.value;

              if (recordId == linkedRecord.id) {
                if (getObj) {
                  records.push(linkedRecord);
                } else {
                  records.push(linkedRecord.fields['Name']);
                }
              }
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      return records;
    }
  }, {
    key: "getFieldContent",
    value: function getFieldContent(recordArray, fieldName) {
      var linkedTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var results = [];

      var _iterator11 = _createForOfIteratorHelper(recordArray),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var record = _step11.value;

          if (linkedTable) {
            var recordIds = record.fields[fieldName];
            var linked = Cytosis.getLinkedRecords(recordIds, linkedTable, true);
            if (linked.length > 0) results = results.concat(linked);else results.push(record.fields[fieldName]);
          } else results.push(record.fields[fieldName]);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      return results;
    }
  }, {
    key: "getFieldValues",
    value: function getFieldValues(recordArray, field) {
      var results = [];

      var _iterator12 = _createForOfIteratorHelper(recordArray),
          _step12;

      try {
        var _loop = function _loop() {
          var record = _step12.value;
          var recordValue = record.fields[field];

          if (Array.isArray(recordValue)) {
            var _iterator13 = _createForOfIteratorHelper(recordValue),
                _step13;

            try {
              var _loop2 = function _loop2() {
                var rV = _step13.value;

                if (!results.find(function (r) {
                  return r == rV;
                })) {
                  results.push(rV);
                }
              };

              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                _loop2();
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }
          } else {
            if (!results.find(function (r) {
              return r == recordValue;
            })) {
              results.push(recordValue);
            }
          }
        };

        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      return results;
    }
  }, {
    key: "getNames",
    value: function getNames(recordArray) {
      var fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Name';
      var results = [];

      var _iterator14 = _createForOfIteratorHelper(recordArray),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var record = _step14.value;
          if (record) results.push(record.fields[fieldName]);
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }

      return results;
    }
  }, {
    key: "getFields",
    value: function getFields(recordArray) {
      var fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Name';
      var results = [];

      var _iterator15 = _createForOfIteratorHelper(recordArray),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var record = _step15.value;
          if (record.fields && record.fields[fieldName]) results.push(record.fields[fieldName]);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }

      return this.deduplicate(results);
    }
  }, {
    key: "split",
    value: function split(record, key) {
      var maxChunks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
      var chunkSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100000;
      var itemString = JSON.stringify(record.fields[key]);
      if (itemString === undefined) return record;
      var parts = [];
      var i = 0;
      var length = itemString.length;

      while (length > 0) {
        parts.push(itemString.substr(i * chunkSize, chunkSize));
        length -= chunkSize;
        i++;
      }

      record.fields[key] = JSON.stringify({
        chunks: i,
        chunkSize: chunkSize
      });
      var j = 0;

      if (i < maxChunks) {
        while (j < i) {
          record.fields["".concat(key, "-").concat(j + 1)] = parts[j];
          j++;
        }
      } else {
        throw new Error("[Cytosis] \u2014 couldn\u2019t split record \"".concat(record.fields.Name, "\" \u2014 not enough chunks"));
      }

      return record;
    }
  }, {
    key: "unsplit",
    value: function unsplit(record, key) {
      if (!record.fields[key] || !JSON.parse(record.fields[key]).chunks) return JSON.parse(record.fields[key]);
      var chunks = JSON.parse(record.fields[key]).chunks;
      var itemString = '';
      var i = 0;

      while (i < chunks) {
        itemString += record.fields["".concat(key, "-").concat(i + 1)];
        delete record.fields["".concat(key, "-").concat(i + 1)];
        i++;
      }

      var data = JSON.parse(itemString);
      record.fields[key] = data;
      return record;
    }
  }, {
    key: "deduplicate",
    value: function deduplicate(recordArray) {
      return recordArray.filter(function (val, i, arr) {
        return arr.indexOf(val) == i;
      });
    }
  }, {
    key: "sort",
    value: function sort(recordArray) {
      var sortBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Name';
      var sortFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      recordArray.sort(sortFn || function (a, b) {
        var nameA = a.fields[sortBy].toUpperCase();
        var nameB = b.fields[sortBy].toUpperCase();

        if (nameA < nameB) {
          return -1;
        }

        if (nameA > nameB) {
          return 1;
        }

        return 0;
      });
      return recordArray;
    }
  }, {
    key: "search",
    value: function search(str, sourceArray, searchByArray) {
      var linkedTableArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      if (!str) return sourceArray;
      return sourceArray.filter(function (obj) {
        var searchterm = str.toLowerCase();

        var _iterator16 = _createForOfIteratorHelper(searchByArray),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var field = _step16.value;

            if (obj.fields[field]) {
              if (typeof obj.fields[field] == 'string') {
                if (obj.fields[field].toLowerCase().includes(searchterm)) return true;
              } else if (Array.isArray(obj.fields[field])) {
                var _iterator17 = _createForOfIteratorHelper(obj.fields[field]),
                    _step17;

                try {
                  for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                    var strField = _step17.value;
                    if (strField.toLowerCase().includes(searchterm)) return true;
                  }
                } catch (err) {
                  _iterator17.e(err);
                } finally {
                  _iterator17.f();
                }

                if (linkedTableArray.length > 0) {
                  var _iterator18 = _createForOfIteratorHelper(linkedTableArray),
                      _step18;

                  try {
                    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                      var linkedTable = _step18.value;
                      var records = Cytosis.getLinkedRecords(obj.fields[field], linkedTable, true);

                      var _iterator19 = _createForOfIteratorHelper(records),
                          _step19;

                      try {
                        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                          var record = _step19.value;
                          if (record.fields['Name'].toLowerCase().includes(searchterm)) return true;
                        }
                      } catch (err) {
                        _iterator19.e(err);
                      } finally {
                        _iterator19.f();
                      }
                    }
                  } catch (err) {
                    _iterator18.e(err);
                  } finally {
                    _iterator18.f();
                  }
                }
              }
            }
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }

        return false;
      });
    }
  }, {
    key: "filter_or",
    value: function filter_or(keywords, field) {
      var orArr = [],
          strArr = "";
      keywords.map(function (keyword) {
        orArr.push("{".concat(field, "}=\"").concat(keyword, "\""));
      });
      strArr = orArr.join(', ');
      return "IF(OR(".concat(orArr, "), TRUE())");
    }
  }]);
  return Cytosis;
}();

var _default = Cytosis;
exports.default = _default;